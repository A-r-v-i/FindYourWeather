{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_call","data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","setState","sys","main","temp","weather","undefined","windSpeed","stop","_x","apply","arguments","state","Titles_Titles","Form_Form","Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8373837f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Titles extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className=\"title-container__title\">Weather Finder</h2>\r\n        <h3 className=\"title-container__subtitle\">Find the weather of where you want....</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n  render() {\r\n    return (\r\n       <form onSubmit={this.props.getWeather}>\r\n\r\n       <input type=\"text\" name=\"city\" placeholder=\"Type your city\" />\r\n       <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n       <button>Get weather</button>\r\n       \r\n       </form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Weather extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\r\n            this.props.city && <p className=\"weather__key\">Location:\r\n            <span className=\"weather__value\">  {this.props.city}</span>\r\n            </p>\r\n        }\r\n        {\r\n            this.props.country && <p className=\"weather__key\">Country:\r\n            <span className=\"weather__value\">  {this.props.country}</span>\r\n            </p>\r\n        }\r\n        {\r\n            this.props.temperature && <p className=\"weather__key\">Temperature: \r\n            <span className=\"weather__value\">  {this.props.temperature}</span>\r\n            </p>\r\n        }\r\n        {\r\n            this.props.humidity && <p className=\"weather__key\">Humidity: \r\n            <span className=\"weather__value\">  {this.props.humidity} g/kg</span>\r\n            </p>\r\n        }\r\n        {\r\n            this.props.description && <p className=\"weather__key\">Condition: \r\n            <span className=\"weather__value\">  {this.props.description}</span>\r\n            </p>\r\n        }      \r\n        {\r\n            this.props.error && \r\n            <h4 className=\"weather__key\">\r\n            <span>{this.props.error}</span>\r\n            </h4>\r\n            }  \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Titles from '../src/components/Titles';\nimport Form from '../src/components/Form';\nimport Weather from '../src/components/Weather';\nimport './App.css';\n\n\nconst API_KEY = \"9c0e800453a659f6da54c3546bbcbfc2\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      city : undefined,\n      country : undefined,\n      temperature : undefined,\n      humidity : undefined,\n      description : undefined,\n      windSpeed : undefined,\n      error : undefined,\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call= await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if(city && country) {\n      console.log(data);\n    this.setState ({\n      city : data.name,\n      country : data.sys.country,\n      temperature : data.main.temp,\n      humidity : data.main.humidity,\n      description : data.weather[0].description,\n      error : \"\"\n    });\n    } \n    else {\n      this.setState({\n        city : undefined,\n      country : undefined,\n      temperature : undefined,\n      humidity : undefined,\n      description : undefined,\n      windSpeed : undefined,\n      error : \"Enter some value gentleman..\",\n      })\n    }\n  }\n\n  render() {\n  return (\n    <div>\n       <div className=\"wrapper\">\n         <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                 <div className=\"col-xs-5 title-container\">\n                   <Titles />\n                 </div>\n                 <div className=\"col-xs-7 form-container\">\n                      <Form getWeather={this.getWeather} />\n                      <Weather \n                        city = {this.state.city}  \n                        country = {this.state.country}\n                        temperature = {this.state.temperature}\n                        humidity = {this.state.humidity}\n                        description = {this.state.description}\n                        error = {this.state.error}\n                      />\n                 </div>\n              </div>\n            </div>\n         </div>\n       </div>\n    </div>\n   );\n }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}